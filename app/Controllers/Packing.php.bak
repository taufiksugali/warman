<?php

namespace App\Controllers;
use App\Models\PackingModel;
use App\Models\MaterialDetailModel;
use App\Models\OutboundpoModel;
use App\Models\ResourceController;
use App\Models\PackagingMaterialModel;
use App\Models\OutboundModel;
use App\Models\BillModel;
use App\Models\OutboundDetailModel;
use App\Models\MaterialSohModel;
use App\Models\LocationModel;
use App\Models\SohTotalModel;
use Config\Services;

class Packing extends BaseController
{
    public function __construct()
    {
        $this->packing = new PackingModel();
        $this->material_detail = new MaterialDetailModel();
        $this->outboundpo = new OutboundpoModel();
        $this->pm = new PackagingMaterialModel();
        $this->outbound = new OutboundModel();
        $this->bill = new BillModel();
        $this->outbound_detail = new OutboundDetailModel();
        $this->material_soh = new MaterialSohModel();
        $this->location = new LocationModel();
        $this->soh = new SohTotalModel();

        helper(['form', 'url', 'my']);

        $GLOBALS['hris'] = 'https://hris.poslogistics.co.id/';
		// $GLOBALS['hris'] = 'http://app.poslogistics.co.id:6080/hris/';

        // special module for warehouse
        if(session()->get('user_type')==1) return redirect()->to(base_url('cannot_access'));

    }

    public function index(){
        $data = [
            'title' => 'Packing',
            'title_menu' => 'Packing',
            'sidebar' => 'Packing plan'
        ];	

        // custom JS
        $data["js"] = "packing_list.js";

		echo view('layout/header', $data);
		echo view('outbound/packing_list', $data);
		echo view('layout/footer_v2', $data);
    }

    public function getData(){

        $columns = array( 
            0 => 'po_outbound.po_outbound_id',
            1 => 'po_outbound.po_outbound_id',
            2 => 'po_outbound.po_outbound_id',
            3 => 'po_outbound.po_outbound_id',
            4 => 'po_outbound.po_create_date',
            5 => 'customer.customer_name',
            6 => 'po_outbound.po_outbound_id',
        );

        $limit = $this->request->getPost('length');
        $start = $this->request->getPost('start');
        $order = $columns[$this->request->getPost('order')[0]['column']];
        $dir = $this->request->getPost('order')[0]['dir']; 

        $totalData = $this->packing->all_po_outbound_count_bystatus("1");
        $totalFiltered = $totalData;

        if(empty($this->request->getPost('search')['value'])) { 
            $packing = $this->packing->all_po_outbound_bystatus($limit, $start, $order, $dir, "1");
        } else {
            $search = $this->request->getPost('search')['value']; 
            $packing = $this->packing->search_po_outbound_bystatus($limit, $start, $search, $order, $dir, "1");
            $totalFiltered = $this->packing->search_po_outbound_count_bystatus($search, "1");
        }

        $data = array();
        if(@$packing) {
            foreach ($packing as $row) {
                $start++;
       
                $outbound_status = '<span class="label label-light-success label-pill label-inline mr-2">New</span>';
                $outbound_action = '<a href="'. base_url('packing/addedit/'.$row->po_outbound_id).'" title="Add/edit packing" class="btn btn-sm btn-clean btn-icon mr-1" title="Detail"><span class="svg-icon svg-icon-success svg-icon-md"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                    <rect x="0" y="0" width="24" height="24"></rect>
                    <path d="M20.4061385,6.73606154 C20.7672665,6.89656288 21,7.25468437 21,7.64987309 L21,16.4115967 C21,16.7747638 20.8031081,17.1093844 20.4856429,17.2857539 L12.4856429,21.7301984 C12.1836204,21.8979887 11.8163796,21.8979887 11.5143571,21.7301984 L3.51435707,17.2857539 C3.19689188,17.1093844 3,16.7747638 3,16.4115967 L3,7.64987309 C3,7.25468437 3.23273352,6.89656288 3.59386153,6.73606154 L11.5938615,3.18050598 C11.8524269,3.06558805 12.1475731,3.06558805 12.4061385,3.18050598 L20.4061385,6.73606154 Z" fill="#000000" opacity="0.3"></path>
                    <polygon fill="#000000" points="14.9671522 4.22441676 7.5999999 8.31727912 7.5999999 12.9056825 9.5999999 13.9056825 9.5999999 9.49408582 17.25507 5.24126912"></polygon>
                </g>
                </svg></span></a>';

                // $material_detail = $this->picking->get_po_outbound_detail($row->po_outbound_id); // data lama
                $material_detail = $this->outboundpo->get_outbound_detail($row->po_outbound_id);
                $arrayMaterial = [];

                foreach($material_detail as $mat){
                    $dataMat = '<li>' . $mat->material_name . ', '.$mat->outbound_qty.' ' . $mat->uom_name . '</li>';
                    array_push($arrayMaterial, $dataMat);
                }
                $outbound_mat = join("", $arrayMaterial);

                $arrayDetail = [];

                $nestedData['number'] = $start;
                $nestedData['po_outbound_id'] = @$row->po_outbound_id;
                $nestedData['po_create_date'] = date('d-m-Y', strtotime(@$row->po_create_date));
                $nestedData['customer_name'] = @$row->customer_name;
                $nestedData['material_name'] = $outbound_mat;
                $nestedData['status'] = $outbound_status;
                $nestedData['action'] = $outbound_action;
                
                $data[] = $nestedData;
            }
        }
          
        $json_data = array(
                    "draw"            => intval($this->request->getPost('draw')),  
                    "recordsTotal"    => intval($totalData),  
                    "recordsFiltered" => intval($totalFiltered), 
                    "data"            => $data
                );
            
        echo json_encode($json_data);
    }

    public function getColumns()
	{
		$fields = array('po_outbound_id'
                        , 'po_create_date'
                        , 'customer_name'
                        , 'material_name');
		$columns[] = array(
			'data' => 'number',
			'className' => 'text-center'
		);
        $columns[] = array(
            'data' => 'action',
            'className' => 'text-center text-nowrap'
        );
        $columns[] = array(
            'data' => 'status',
            'className' => 'text-center'
        );
		foreach ($fields as $field) {
			$columns[] = array(
				'data' => $field,
                'className' => 'text-nowrap'
			);
		}
		echo json_encode($columns); 
	}

    public function getPickingNo() {
        $key     = $this->request->getPost('barcode');
		$result = $this->packing->getPickingNo($key);
        
        if (empty($result)){
            $jsonOut = array(
                "code"=>"204",
                "msg"=>"Barcode not found, please check product packing list",
                "data"=>""          
            );
            echo json_encode($jsonOut);
        }
        else{
            $jsonOut = array(
                "code"=>"200",
                "msg"=>"",
                "data"=>$result         
            );
            echo json_encode($jsonOut);
        }
    }

    public function addedit($po_id="")
	{
		$data = [
            'title' => 'Packing',
            'title_menu' => 'Packing',
            'sidebar' => 'Packing'
        ];	
        $outboundpo = $this->packing->get_outbound_byid_after_picking($po_id);
        if(empty($outboundpo)) return redirect()->to(base_url('packing'));

        // pake data lama
        $detail_po = $this->outboundpo->get_outbound_detail($po_id);

		$dataObject = [
			'validation' => \Config\Services::validation(),
            'outboundpo' => $outboundpo,
            'detail_po' => $detail_po,
            'outbound_package' => $this->pm->get_outbound_package($po_id),
		];

        // custom JS
        $data["js"] = "packing_addedit.js";

		echo view('layout/header', $data);
		echo view('outbound/addedit_packing', $dataObject);
		echo view('layout/footer_v2', $data);
	}

    public function getProductItem($idPO=""){
        $key     = $this->request->getGet('q');
        $data = $this->packing->getProductItem($idPO, $key);
        echo json_encode($data);     
    }

    public function getProductByBarcode($idPO="") {
        $key     = $this->request->getPost('barcode');
		$result = $this->packing->getProductByBarcode($idPO, $key);
        
        if (empty($result)){
            $jsonOut = array(
                "code"=>"204",
                "msg"=>"Barcode not found, please check item outbound request",
                "data"=>""          
            );
            echo json_encode($jsonOut);
        }
        else{
            $jsonOut = array(
                "code"=>"200",
                "msg"=>"",
                "data"=>$result         
            );
            echo json_encode($jsonOut);
        }
    }

    public function save() {
        if (!$this->request->isAJAX()) {
            exit('No direct script access allowed');
        } else {
            $err_msg    = '';
            $post       = array('po_id','description','material_id','qty');
            $data = array();
            foreach($post as $key=>$val) {
                $$val       = $this->request->getPost($val) == false ? '' : $this->request->getPost($val);
                $data[$val] = $$val;
            }

            // check POI
            $outboundpo = $this->packing->get_outbound_byid_after_picking($data['po_id']);
            if(empty($outboundpo)) $err_msg =  "Outbound ID not found.<br/>";

            // get Data detail 
            $dataDetail = array();
            for($i=0; $i<sizeof($data['material_id']); $i++) {
                if(!isset($dataDetail[$data['material_id'][$i]])) {
                    $dataDetail[$data['material_id'][$i]] = array();
                    $dataDetail[$data['material_id'][$i]]['qty'] = intval($data['qty'][$i]);
                } else {
                    $qty = $dataDetail[$data['material_id'][$i]]['qty'];
                    $dataDetail[$data['material_id'][$i]]['qty'] = intval($qty) + intval($data['qty'][$i]);
                }
            }

            // check PO detail VS data detail 
            $detail_po = $this->outboundpo->get_outbound_detail($data['po_id']);
            $error2 = false;
            $varTab = "<table id='tbl-error'>";
            $header = true;
            foreach ($detail_po as $key => $value) {
                $errorDet = false;
                $real = 0;
                if(!isset($dataDetail[$value->material_id])) {
                    $error2 = true;
                    $errorDet = true;
                } else {
                    if(intval($dataDetail[$value->material_id]['qty'])!=intval($value->outbound_qty)) {
                        $error2 = true;
                        $errorDet = true;
                        $real = intval($dataDetail[$value->material_id]['qty']);
                    }
                }
                if ($errorDet) {
                    if ($header) {
                        $varTab .= "<tr>\
                                    <th>Product Code</th>\
                                    <th>Product Name</th>\
                                    <th>Unit</th>\
                                    <th>Qty Request</th>\
                                    <th>Qty Realization</th>\
                                </tr>";
                        $header = false;
                    }
                    $varTab .= "<tr>\
                                    <td>".$value->material_code."</td>\
                                    <td>".$value->material_name."</td>\
                                    <td>".$value->uom_name."</td>\
                                    <td>".$value->outbound_qty."</td>\
                                    <td>".$real."</td>\
                                </tr>";
                }
            }
            $varTab .= "</table>";
            if($error2) { 
                $err_msg .= $varTab;
            }
            if (!empty($err_msg)) {
                return $this->response->setJSON([
                    'code'  => 204,
                    'msg'   => $err_msg,
                    'data'  => ""
                ]);
            }

            // // data insert outbound
            // $id = $this->outbound->generate_id();
            // $data_outbound = [
            //     'outbound_id'       => $id,
            //     'po_outbound_id'    => $outboundpo->po_outbound_id,
            //     // 'outbound_doc_date' => date_format(date_create($this->request->getPost('doc_date')), 'Y-m-d'),
            //     'out_date'          => $outboundpo->po_out_date,
            //     // 'outbound_doc' => $this->request->getPost('doc_number'),
            //     'description'       => trim($data["description"]),
            //     'penerima'          => $outboundpo->po_penerima,
            //     'outbound_wh_asal'  => $outboundpo->warehouse_id,
            //     'outbound_type'     => 'TY003',
            //     'status'            => 2,
            //     'create_date'       => date('Y-m-d H:i:s'),
            //     'create_by'         => session()->get('fullname')
            // ];
            // // $this->outbound->insert_data($data_outbound);

            // // update status PO
            // $data_po = [
            //     'po_out_status' => 2
            // ];
            // // $this->outboundpo->update_data($outboundpo->po_outbound_id, $data_po);

            // // insert bull biayay packing default standard
            // $packing_cost = 0;
            // $outbound_package = $this->pm->get_outbound_package($outboundpo->po_outbound_id);
            // foreach($outbound_package as $op){
            //     $packing_cost = $packing_cost + $op->pm_cost;
            // }
            // $bill_id = $this->bill->generate_id();
            // $data_bill = [
            //     'bill_id'       => $bill_id,
            //     'ref_id'        => $id,
            //     'po_id'         => $outboundpo->po_outbound_id,
            //     'owners_id'     => $outboundpo->owners_id,
            //     'description'   => 'BIAYA PACKING',
            //     'amount'        => $packing_cost,
            //     'created_date'  => date('Y-m-d H:i:s'),
            //     'bill_status'   => 0
            // ];
            // // $this->bill->insert_data($data_bill);

            // // detail outbound
            // $detailPicking = $this->packing->getDetailPickingByPO($outboundpo->po_outbound_id);
            // foreach ($detailPicking as $key => $value) {
            //     // Insert outbound detail
            //     $detil_id = $this->outbound_detail->generate_id();
            //     $data_outbound_detail = [
            //         'det_outbound_id'   => $detil_id,
            //         'outbound_id'       => $data_outbound['outbound_id'],
            //         'material_detail_id'=> $value->material_detail_id,
            //         'outbound_qty'      => $value->qty,
            //         'qty_realization'   => $value->qty,
            //         'location_id'       => $value->location_id,
            //         'status' => 2
            //     ];
            //     // $this->outbound_detail->insert_data($data_outbound_detail);

            //     // update warehouse_soh
            //     $current_stock = $this->material_soh->get_currrent_stock($value->material_detail_id)->stock_ok; 
            //     $new_stock = $current_stock - $data_outbound_detail['qty_realization'];
            //     $mat_soh = [
            //         'stock_ok' => $new_stock,
            //         'status' => 1
            //     ];
            //     // $this->material_soh->update_byid($value->material_detail_id, $mat_soh);

            //     // update stok by location material_location
            //     $current_qty = $this->location->get_location_byid($value->location_id)->qty;
            //     $new_qty = $current_qty - $data_outbound_detail['qty_realization'];
            //     $mat_location = [
            //         'qty' => $new_qty
            //     ];
            //     // $this->location->update_data($value->location_id, $mat_location);

            //     // update storage
            //     $sataShelf      = $this->location->check_material_detail_on_shelfv2($value->location_id);
            //     $shelf_avail    = $sataShelf->shelf_availability;
            //     $shelf_id       = $sataShelf->shelf_id;
            //     $cur_avail      = $shelf_avail + $data_outbound_detail['qty_realization'];
                
            //     $data_shelf_tujuan = [
            //         'shelf_availability' => $cur_avail
            //     ];
            //     // $this->shelf->update_data($shelf_id, $data_shelf_tujuan);

            //     // update soh_total
            //     $warehouse_id   = $outboundpo->warehouse_id;
            //     $owner_id       = $outboundpo->owners_id;
            //     $material_id    = $value->material_id;
            //     $data_soh = $this->soh->get_stock_good_v2($warehouse_id, $owner_id, $material_id);
            //     $qty_out = $data_outbound_detail['qty_realization'];
            //     foreach ($data_soh as $key_soh => $val_soh) {
            //         if ($qty_out>0) {
            //             if ($qty_out>$val_soh->stock_good_warehouse) {
            //                 $qty_out_row = $val_soh->stock_good_warehouse;
            //                 $soh_tot = [
            //                     'stock_good_seller' => $val_soh->stock_good_seller - $qty_out_row,
            //                     'stock_good_warehouse' => $val_soh->stock_good_warehouse - $qty_out_row
            //                 ];
            //                 // $this->soh->update_data($val_soh->sot_id, $soh_tot);
            //                 $qty_out = $qty_out - $qty_out_row;
            //             } else {
            //                 $qty_out_row = $qty_out;
            //                 $soh_tot = [
            //                     'stock_good_seller' => $val_soh->stock_good_seller - $qty_out_row,
            //                     'stock_good_warehouse' => $val_soh->stock_good_warehouse - $qty_out_row
            //                 ];
            //                 // $this->soh->update_data($val_soh->sot_id, $soh_tot);
            //                 $qty_out = $qty_out - $qty_out_row;
            //             }
            //         }
            //     }
                
            // }

            // // insert bill admin fee default standard
            // $outboundpo_id      = $outboundpo->po_outbound_id;
            // $outboundpo_detail  = $this->outboundpo->get_outbound_detail($outboundpo_id);
            // $outbound_charge    = 0;

            // foreach($outboundpo_detail as $row_po){
            //     $outbound_qty = $row_po->outbound_qty;
            //     $material_price = $row_po->material_price;
            //     $charge_per_material = 0.035 * $material_price;
            //     $total_charge_per_material = 0;
            //     //-- logika minimum dan maksimum tariff
            //     if($charge_per_material < 2500){
            //         $charge_per_material = 2500;
            //     }elseif($charge_per_material > 15000){
            //         $charge_per_material = 15000;
            //     }
            //     $total_charge_per_material = $charge_per_material * intVal($row_po->outbound_qty);
            //     $outbound_charge = $outbound_charge + $total_charge_per_material;
            // }

            // $bill_id = $this->bill->generate_id();
            // $data_bill = [
            //     'bill_id'       => $bill_id,
            //     'owners_id'     => $outboundpo->owners_id,
            //     'ref_id'        => $id,
            //     'po_id'         => $outboundpo_id,
            //     'description'   => 'ADMIN FEE',
            //     'amount'        => $outbound_charge,
            //     'created_date'  => date('Y-m-d H:i:s'),
            //     'bill_status'   => 0
            // ];
            // // $this->bill->insert_data($data_bill);

            $result = $this->packing->save_data($data, $data['po_id']);
            if($result) {
                $dataOutbound = $this->packing->getOutboundByPO($data['po_id']);
                if(empty($idEdit)){
                    $msg = 'Insert success';
                }else{
                    $msg = 'Update success';
                }
                return $this->response->setJSON([
                    'code'  => 200,
                    'msg'   => $msg,
                    'data'  => $dataOutbound->outbound_id
                ]);

            }else{
                if(empty($idEdit)){
                   $msg = 'Insert failed';
                }else{
                   $msg = 'Update failed';
                }
                return $this->response->setJSON([
                    'code'  => 204,
                    'msg'   => $msg,
                    'data'  => ""
                ]);
            }
        }
    }

}
?>